<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hniu.mapper.BooksMapper">
  <resultMap id="BaseResultMap" type="com.hniu.entity.Books">
    <!--
      WARNING - @mbg.generated
    -->
    <id column="book_id" jdbcType="INTEGER" property="bookId" />
    <result column="book_type_name" jdbcType="VARCHAR" property="bookTypeName" />
    <result column="book_name" jdbcType="VARCHAR" property="bookName" />
    <result column="img_path" jdbcType="VARCHAR" property="imgPath" />
    <result column="isbn" jdbcType="VARCHAR" property="isbn" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="press" jdbcType="VARCHAR" property="press" />
    <result column="price" jdbcType="VARCHAR" property="price" />
    <result column="publication_time" jdbcType="VARCHAR" property="publicationTime" />
    <result column="page_number" jdbcType="INTEGER" property="pageNumber" />
    <result column="number" jdbcType="SMALLINT" property="number" />
    <result column="create_time" jdbcType="VARCHAR" property="createTime" />
    <result column="class_number" jdbcType="VARCHAR" property="classNumber" />
    <result column="introduction" jdbcType="LONGVARCHAR" property="introduction" />
    <result column="directory" jdbcType="LONGVARCHAR" property="directory" />
  </resultMap>
  <select id="getBookList" resultType="com.hniu.entity.vo.BookVo">
    SELECT b.book_id bookId,b.book_name bookName,b.img_path imgPath,b.author author,b.press press,t.book_type_name bookTypeName
    FROM tbl_books b
    LEFT JOIN tbl_book_types t
    ON b.book_type_id = t.book_type_id
  </select>
  <select id="getBookById" parameterType="int" resultMap="BaseResultMap">
    <include refid="commom"></include>
    where b.book_id = #{bookId}
  </select>
    <select id="selectByIbsn" parameterType="String" resultMap="BaseResultMap">
        <include refid="commom"></include>
        where b.isbn = #{isbn}
    </select>
    <select id="selectRaning" resultType="com.hniu.entity.vo.BookVo">
       SELECT b.book_id bookId,b.book_name bookName,b.img_path imgPath,b.author author,b.press press,t.book_type_name bookTypeName
FROM (SELECT book_id,SUM(borrow_number) bow
        FROM tbl_book_states
        GROUP BY book_id
        ORDER BY bow DESC) s
        LEFT JOIN tbl_books b
        ON s.book_id = b.book_id
	LEFT JOIN tbl_book_types t
	ON b.book_type_id = t.book_type_id
    </select>
  <update id="updateBookById" parameterType="com.hniu.entity.Books">
    update tbl_books
    <set>
      <if test="bookTypeName!=null and !&quot;&quot;.equals(bookTypeName.trim())">
        book_type_id = (select book_type_id from tbl_book_types where book_type_name = #{bookTypeName,jdbcType=INTEGER}),
      </if>
      <if test="bookName!=null and !&quot;&quot;.equals(bookName.trim())">
        book_name = #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="imgPath!=null and !&quot;&quot;.equals(imgPath.trim())">
        img_path = #{imgPath,jdbcType=VARCHAR},
      </if>
      <if test="isbn!=null and !&quot;&quot;.equals(isbn.trim())">
       isbn = #{isbn,jdbcType=VARCHAR},
      </if>
      <if test="author!=null and !&quot;&quot;.equals(author.trim())">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="press!=null and !&quot;&quot;.equals(press.trim())">
        press = #{press,jdbcType=VARCHAR},
      </if>
      <if test="price!=null and !&quot;&quot;.equals(price.trim())">
        price = #{price,jdbcType=VARCHAR},
      </if>
      <if test="publicationTime!=null and !&quot;&quot;.equals(publicationTime.trim())">
        publication_time = #{publicationTime,jdbcType=VARCHAR},
      </if>
      <if test="classNumber!=null and !&quot;&quot;.equals(classNumber.trim())">
        class_number = #{classNumber,jdbcType=VARCHAR},
      </if>
      <if test="pageNumber!=null">
        page_number = #{pageNumber,jdbcType=INTEGER},
      </if>
      <if test="number!=null">
        number = #{number},
      </if>
      <if test="introduction!=null and !&quot;&quot;.equals(introduction.trim())">
        introduction = #{introduction,jdbcType="LONGVARCHAR"},
      </if>
      <if test="directory!=null and !&quot;&quot;.equals(directory.trim())">
        directory = #{directory,jdbcType="LONGVARCHAR"},
      </if>
    </set>
    where book_id = #{bookId,jdbcType=INTEGER}
  </update>
  <sql id="insertBook">
		insert into tbl_books (
		book_type_id,
		book_name,
		isbn, author, press,
		price, publication_time,
		page_number,
		number,
		create_time, class_number,
		introduction,
		directory,img_path)
		values (
		(select book_type_id from tbl_book_types where book_type_name = #{bookTypeName,jdbcType=INTEGER}),
		#{bookName,jdbcType=VARCHAR},
		#{isbn,jdbcType=VARCHAR},
		#{author,jdbcType=VARCHAR},
		#{press,jdbcType=VARCHAR},
		#{price,jdbcType=REAL},
		#{publicationTime,jdbcType=SMALLINT},
		#{pageNumber,jdbcType=INTEGER},
		#{number,jdbcType=SMALLINT},
		#{createTime,jdbcType=VARCHAR},
		#{classNumber,jdbcType=VARCHAR},
		#{introduction,jdbcType=LONGVARCHAR},
		#{directory,jdbcType=LONGVARCHAR},
		#{imgPath,jdbcType=VARCHAR})
  </sql>
    <sql id="commom">
		SELECT b.book_id,
		b.book_name,
		b.isbn, b.author, b.press,
		b.price, b.publication_time,
		b.page_number,
		b.number,
		b.create_time, b.class_number,
		b.introduction,
		b.directory,img_path,t.book_type_name book_type_name
        FROM tbl_books b
        LEFT JOIN tbl_book_types t
        ON b.book_type_id = t.book_type_id
  </sql>
    <select id="selectByBarCode" parameterType="string" resultMap="BaseResultMap">
        <include refid="commom"></include>
        left join tbl_book_states s
        on b.book_id = s.book_id
        where s.bar_code = #{barCode}
    </select>
    <update id="addNumber" parameterType="java.lang.Integer">
		update tbl_books
		set
		number=number+1
		where book_id=#{bookId}
	</update>
    <!-- //对图书的number进行减一void deleteNumber(Integer bid); -->
    <update id="deleteNumber" parameterType="java.lang.Integer">
		update tbl_books
		set
		number=number-1
		where book_id=#{bookId}
	</update>
  <insert id="insertBook" parameterType="com.hniu.entity.Books"
          keyProperty="bookId" useGeneratedKeys="true">
    <include refid="insertBook"></include>
  </insert>
  <delete id="deleteBookById" parameterType="int">
  </delete>
</mapper>